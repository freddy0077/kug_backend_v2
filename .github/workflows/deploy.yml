# name: Deploy Dog Pedigree Backend

# on:
#   push:
#     branches: [ main, master ]
#   workflow_dispatch:  # Allow manual triggering

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
      
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '16'
#           cache: 'npm'
      
#       - name: Install dependencies
#         run: npm ci
      
#       - name: Run tests
#         run: npm test
        
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2
      
#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_HUB_USERNAME }}
#           password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
#       - name: Build and push Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: true
#           tags: ${{ secrets.DOCKER_HUB_USERNAME }}/kug-backend:latest,${{ secrets.DOCKER_HUB_USERNAME }}/kug-backend:${{ github.sha }}
#           cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/kug-backend:buildcache
#           cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/kug-backend:buildcache,mode=max
      
#       - name: Deploy to Production Server
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           script: |
#             cd /path/to/production/directory
            
#             # Pull the latest image
#             docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/kug-backend:latest
            
#             # Update docker-compose.yml if necessary
#             # Create or update .env file with production variables
#             cat > .env << EOL
#             NODE_ENV=production
#             PORT=5000
#             DB_USERNAME=${{ secrets.DB_USERNAME }}
#             DB_PASSWORD=${{ secrets.DB_PASSWORD }}
#             DB_NAME=${{ secrets.DB_NAME }}
#             DB_HOST=${{ secrets.DB_HOST }}
#             DB_PORT=${{ secrets.DB_PORT }}
#             DB_DIALECT=postgres
#             JWT_SECRET=${{ secrets.JWT_SECRET }}
#             JWT_EXPIRATION=1d
#             EOL
            
#             # Restart the application
#             docker-compose down
#             docker-compose up -d
            
#             # Run migrations if needed
#             docker-compose exec -T app npx sequelize-cli db:migrate
            
#             # Clean up old images
#             docker image prune -f
